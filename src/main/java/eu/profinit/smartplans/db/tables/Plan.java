/*
 * This file is generated by jOOQ.
 */
package eu.profinit.smartplans.db.tables;


import eu.profinit.smartplans.db.Indexes;
import eu.profinit.smartplans.db.Keys;
import eu.profinit.smartplans.db.Public;
import eu.profinit.smartplans.db.tables.records.PlanRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Plan extends TableImpl<PlanRecord> {

    private static final long serialVersionUID = 206748630;

    /**
     * The reference instance of <code>public.plan</code>
     */
    public static final Plan PLAN = new Plan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanRecord> getRecordType() {
        return PlanRecord.class;
    }

    /**
     * The column <code>public.plan.id</code>.
     */
    public final TableField<PlanRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('plan_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.plan.client_id</code>.
     */
    public final TableField<PlanRecord, Integer> CLIENT_ID = createField(DSL.name("client_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.plan.name</code>.
     */
    public final TableField<PlanRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.plan.enabled</code>.
     */
    public final TableField<PlanRecord, Boolean> ENABLED = createField(DSL.name("enabled"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.plan.amount</code>.
     */
    public final TableField<PlanRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.plan.date_to</code>.
     */
    public final TableField<PlanRecord, LocalDate> DATE_TO = createField(DSL.name("date_to"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * Create a <code>public.plan</code> table reference
     */
    public Plan() {
        this(DSL.name("plan"), null);
    }

    /**
     * Create an aliased <code>public.plan</code> table reference
     */
    public Plan(String alias) {
        this(DSL.name(alias), PLAN);
    }

    /**
     * Create an aliased <code>public.plan</code> table reference
     */
    public Plan(Name alias) {
        this(alias, PLAN);
    }

    private Plan(Name alias, Table<PlanRecord> aliased) {
        this(alias, aliased, null);
    }

    private Plan(Name alias, Table<PlanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Plan(Table<O> child, ForeignKey<O, PlanRecord> key) {
        super(child, key, PLAN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_PLAN);
    }

    @Override
    public Identity<PlanRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PLAN;
    }

    @Override
    public UniqueKey<PlanRecord> getPrimaryKey() {
        return Keys.PLAN_PKEY;
    }

    @Override
    public List<UniqueKey<PlanRecord>> getKeys() {
        return Arrays.<UniqueKey<PlanRecord>>asList(Keys.PLAN_PKEY);
    }

    @Override
    public Plan as(String alias) {
        return new Plan(DSL.name(alias), this);
    }

    @Override
    public Plan as(Name alias) {
        return new Plan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Plan rename(String name) {
        return new Plan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Plan rename(Name name) {
        return new Plan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, Boolean, BigDecimal, LocalDate> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

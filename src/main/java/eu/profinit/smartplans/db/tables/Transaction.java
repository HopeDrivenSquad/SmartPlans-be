/*
 * This file is generated by jOOQ.
 */
package eu.profinit.smartplans.db.tables;


import eu.profinit.smartplans.db.Indexes;
import eu.profinit.smartplans.db.Keys;
import eu.profinit.smartplans.db.Public;
import eu.profinit.smartplans.db.tables.records.TransactionRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = 397340653;

    /**
     * The reference instance of <code>public.transaction</code>
     */
    public static final Transaction TRANSACTION = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>public.transaction.transaction_id</code>.
     */
    public final TableField<TransactionRecord, Long> TRANSACTION_ID = createField(DSL.name("transaction_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction.tx_date</code>.
     */
    public final TableField<TransactionRecord, LocalDate> TX_DATE = createField(DSL.name("tx_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.transaction.client_id</code>.
     */
    public final TableField<TransactionRecord, Integer> CLIENT_ID = createField(DSL.name("client_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.transaction.client_gender</code>.
     */
    public final TableField<TransactionRecord, String> CLIENT_GENDER = createField(DSL.name("client_gender"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.transaction.client_year_of_birth</code>.
     */
    public final TableField<TransactionRecord, Integer> CLIENT_YEAR_OF_BIRTH = createField(DSL.name("client_year_of_birth"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.transaction.amount</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.transaction.merchant_uid</code>.
     */
    public final TableField<TransactionRecord, String> MERCHANT_UID = createField(DSL.name("merchant_uid"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.merchant_category</code>.
     */
    public final TableField<TransactionRecord, String> MERCHANT_CATEGORY = createField(DSL.name("merchant_category"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.shop_tags</code>.
     */
    public final TableField<TransactionRecord, String> SHOP_TAGS = createField(DSL.name("shop_tags"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.merchant_category_id</code>.
     */
    public final TableField<TransactionRecord, String> MERCHANT_CATEGORY_ID = createField(DSL.name("merchant_category_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.shop_uid</code>.
     */
    public final TableField<TransactionRecord, String> SHOP_UID = createField(DSL.name("shop_uid"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.shop_type</code>.
     */
    public final TableField<TransactionRecord, String> SHOP_TYPE = createField(DSL.name("shop_type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.region</code>.
     */
    public final TableField<TransactionRecord, String> REGION = createField(DSL.name("region"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.country</code>.
     */
    public final TableField<TransactionRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction.tag_array</code>.
     */
    public final TableField<TransactionRecord, String[]> TAG_ARRAY = createField(DSL.name("tag_array"), org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>public.transaction</code> table reference
     */
    public Transaction() {
        this(DSL.name("transaction"), null);
    }

    /**
     * Create an aliased <code>public.transaction</code> table reference
     */
    public Transaction(String alias) {
        this(DSL.name(alias), TRANSACTION);
    }

    /**
     * Create an aliased <code>public.transaction</code> table reference
     */
    public Transaction(Name alias) {
        this(alias, TRANSACTION);
    }

    private Transaction(Name alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transaction(Name alias, Table<TransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Transaction(Table<O> child, ForeignKey<O, TransactionRecord> key) {
        super(child, key, TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_CLIENT);
    }

    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.U_TX_ID;
    }

    @Override
    public List<UniqueKey<TransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionRecord>>asList(Keys.U_TX_ID);
    }

    @Override
    public Transaction as(String alias) {
        return new Transaction(DSL.name(alias), this);
    }

    @Override
    public Transaction as(Name alias) {
        return new Transaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Name name) {
        return new Transaction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, LocalDate, Integer, String, Integer, BigDecimal, String, String, String, String, String, String, String, String, String[]> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}

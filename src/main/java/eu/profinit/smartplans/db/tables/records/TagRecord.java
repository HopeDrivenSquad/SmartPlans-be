/*
 * This file is generated by jOOQ.
 */
package eu.profinit.smartplans.db.tables.records;


import eu.profinit.smartplans.db.tables.Tag;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagRecord extends TableRecordImpl<TagRecord> implements Record2<String, BigDecimal> {

    private static final long serialVersionUID = -1769821018;

    /**
     * Setter for <code>public.tag.tag_name</code>.
     */
    public void setTagName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.tag.tag_name</code>.
     */
    public String getTagName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.tag.necessity</code>.
     */
    public void setNecessity(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.tag.necessity</code>.
     */
    public BigDecimal getNecessity() {
        return (BigDecimal) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, BigDecimal> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Tag.TAG.TAG_NAME;
    }

    @Override
    public Field<BigDecimal> field2() {
        return Tag.TAG.NECESSITY;
    }

    @Override
    public String component1() {
        return getTagName();
    }

    @Override
    public BigDecimal component2() {
        return getNecessity();
    }

    @Override
    public String value1() {
        return getTagName();
    }

    @Override
    public BigDecimal value2() {
        return getNecessity();
    }

    @Override
    public TagRecord value1(String value) {
        setTagName(value);
        return this;
    }

    @Override
    public TagRecord value2(BigDecimal value) {
        setNecessity(value);
        return this;
    }

    @Override
    public TagRecord values(String value1, BigDecimal value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagRecord
     */
    public TagRecord() {
        super(Tag.TAG);
    }

    /**
     * Create a detached, initialised TagRecord
     */
    public TagRecord(String tagName, BigDecimal necessity) {
        super(Tag.TAG);

        set(0, tagName);
        set(1, necessity);
    }
}
